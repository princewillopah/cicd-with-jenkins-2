def registry = 'https://princewillopah1.jfrog.io'
def imageName = 'princewillopah1.jfrog.io/valaxy-tut-docker-local/my-image'
def version   = '2.1.3'
pipeline {

    agent {
        node {
            label 'maven-build'
        }
    }
    environment {
        M2_HOME = '/opt/apache-maven-3.9.6'  // Update this with your Maven installation path
        PATH = "$M2_HOME/bin:$PATH"
    }
    stages {
        stage('Preparing to build') {
            steps {
                echo "Preparing to build the Java app"
            }
        }

        stage('Building maven projects') {
            steps {

                // sh 'mvn clean deploy'
                // echo 'Successful builds Done'
                echo "------------------------------- build started -------------------------------"
                sh 'mvn clean deploy'
                echo '------------------------------- builds completed -------------------------------'

            }
        }

        stage('Test') {
            steps {

                // sh 'mvn clean deploy'
                // echo 'Successful builds Done'
                echo "------------------------------- unit test started -------------------------------"
                sh 'mvn surefire-report:report'
                echo '------------------------------- unit test completed -------------------------------'

            }
        }

        //  stage('SonarQube Analysis') {

        //     environment {
        //         scannerHome = tool 'sonar-scanner'
        //          }
        //      steps {
        //         echo "--------------------------------------------------------------"
        //         echo "           STARTING SONARQUBE ANALYSIS"
        //         echo '--------------------------------------------------------------'

        //         withSonarQubeEnv('sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
        //           sh "${scannerHome}/bin/sonar-scanner"
        //         }

        //         echo "--------------------------------------------------------------"
        //         echo "           SUCCESSFULLY ENDED SONARQUBE ANALYSIS        "
        //         echo '--------------------------------------------------------------'
        //      }
        // } 

         stage("Jar Publish") {
            steps {
                script {
                        echo '<--------------- Jar Publish Started --------------->'
                        // def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog-maven"
                        def server = Artifactory.newServer url: 'https://princewillopah1.jfrog.io/artifactory',  credentialsId:'jfrog-maven'
                        def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                        def uploadSpec = """{
                            "files": [
                                {
                                "pattern": "jarstaging/(*)",
                                "target": "first-jfrog-maven-libs-release-local/{1}",
                                "flat": "false",
                                "props" : "${properties}",
                                "exclusions": [ "*.sha1", "*.md5"]
                                }
                            ]
                        }"""
                        def buildInfo = server.upload(uploadSpec)
                        buildInfo.env.collect()
                        server.publishBuildInfo(buildInfo)
                        echo '<--------------- Jar Publish Ended --------------->'  
                
                }
            }   
         } 


         stage(" Docker Build ") {
                 steps {

                            script {
                                echo "Image Name: ${imageName}"
                                echo "Version: ${version}"
                                echo '<--------------- Docker Build Started --------------->'
                                app = docker.build(imageName+":"+version)
                                echo '<--------------- Docker Build Ends --------------->'
                            }
                        }
                }

         stage (" Docker Publish "){
                steps {
                                script {
                                echo '<--------------- Docker Publish Started --------------->'  
                                    docker.withRegistry(registry, 'jfrog-maven'){
                                        app.push()
                                    }    
                                echo '<--------------- Docker Publish Ended --------------->'  
                                }
                }
         }

        // stage("Deploy to EKS") {
        //         steps {

        //              echo "--------------------------------------------------------------"
        //              echo "           Starting Deployment "
        //              echo '--------------------------------------------------------------'

        //             script {

        //                 dir('kubernetes') {// Change into the kubernetes directory
        //                  sh 'chmod +x deploy.sh'
        //                 // Run deploy.sh
        //                 sh './deploy.sh'
        //                 }
        //             }

        //             echo "--------------------------------------------------------------"
        //             echo "           Ended  Deployment      "
        //             echo '--------------------------------------------------------------' 
        //         }
        //     }
        
        
            stage("Deploy with helm to EKS ") {
                steps {

                     echo "--------------------------------------------------------------"
                     echo "           Starting Deployment "
                     echo '--------------------------------------------------------------'

                    script {

                         sh 'helm install my-helm-deployment-cicd helm-k8s-eks-project-deploy-0.1.0.tgz'
                    }

                    echo "--------------------------------------------------------------"
                    echo "           Ended  Deployment      "
                    echo '--------------------------------------------------------------' 
                }
            }


    }
}
